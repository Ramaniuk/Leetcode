class Solution {             
    public int strStr(String haystack, String needle) { 
        if ((haystack.length() == 0 && needle.length() == 0) || needle.length() == 0) {
            return 0;
        }
        for (int idx = 0; idx < haystack.length(); ) {
            if (startsAtIndex2(haystack, needle, idx) == false){
                idx++;
            } else {
                return idx;
            }
        }
        return -1;
    }        
    public boolean startsAtIndex2(String haystack, String needle, int idx) {        
        int i = 0;
        for (; i < needle.length() && i + idx < haystack.length(); i++) {
            if (needle.charAt(i) != haystack.charAt(i + idx)) {
                break;
            }
        }        
        return i == needle.length();
    }
}

    
    /**
     * 1
     * returns true if haystack starts with needle, otherwise false
     */
   /* public boolean startsWith(String haystack, String needle) {
        // hello, he -> true
        if (needle.length() > haystack.length()) {
            return false;
        }
        for (int i = 0; i < haystack.length(); i++) {
            if (i > needle.length()-1) {
                break;
            }
            if (haystack.charAt(i) != needle.charAt(i)) {
                return false;
            }        
        }
        return true;
    } */



    /**
     * 2
     * returns true if haystack starts with needle at position idx, otherwise false
     */
 /*   public boolean startsAtIndex(String haystack, String needle, int idx) {        
        // hello, el, 1 -> true
        if (needle.length() > haystack.length()) {
            return false;
        }
        for (int i = 0; i < needle.length(); i++) {
            if (haystack.charAt(idx) != needle.charAt(i)) {
                return false;                
            } else {
                idx++;
            }
        }
        return true;  
    }
*/
